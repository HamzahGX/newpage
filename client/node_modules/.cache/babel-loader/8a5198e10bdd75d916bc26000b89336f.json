{"ast":null,"code":"import { c as createShadow } from '../shared/create-shadow.mjs';\nimport { e as effectInit } from '../shared/effect-init.mjs';\nimport { e as effectTarget } from '../shared/effect-target.mjs';\nimport { e as effectVirtualTransitionEnd } from '../shared/effect-virtual-transition-end.mjs';\nimport { l as getSlideTransformEl } from '../shared/utils.mjs';\n\nfunction EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true\n    }\n  });\n\n  const createSlideShadows = (slideEl, progress) => {\n    let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n\n    if (!shadowBefore) {\n      shadowBefore = createShadow('flip', slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n\n    if (!shadowAfter) {\n      shadowAfter = createShadow('flip', slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // Set shadows\n    swiper.params.flipEffect;\n    swiper.slides.forEach(slideEl => {\n      let progress = slideEl.progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n\n      createSlideShadows(slideEl, progress);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      let progress = slideEl.progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n\n      const offset = slideEl.swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n\n      if (swiper.browser && swiper.browser.isSafari) {\n        if (Math.abs(rotateY) / 90 % 2 === 1) {\n          rotateY += 0.001;\n        }\n\n        if (Math.abs(rotateX) / 90 % 2 === 1) {\n          rotateX += 0.001;\n        }\n      }\n\n      slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n      if (params.slideShadows) {\n        createSlideShadows(slideEl, progress);\n      }\n\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = transform;\n    }\n  };\n\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements\n    });\n  };\n\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\nexport { EffectFlip as default };","map":{"version":3,"sources":["/Users/hamzag/Desktop/landPage/landingPage/client/node_modules/swiper/modules/effect-flip.mjs"],"names":["c","createShadow","e","effectInit","effectTarget","effectVirtualTransitionEnd","l","getSlideTransformEl","EffectFlip","_ref","swiper","extendParams","on","flipEffect","slideShadows","limitRotation","createSlideShadows","slideEl","progress","shadowBefore","isHorizontal","querySelector","shadowAfter","style","opacity","Math","max","recreateShadows","params","slides","forEach","min","setTranslate","rtlTranslate","rtl","i","length","offset","swiperSlideOffset","rotate","rotateY","rotateX","tx","cssMode","translate","ty","browser","isSafari","abs","zIndex","round","transform","targetEl","setTransition","duration","transformElements","map","el","transitionDuration","querySelectorAll","shadowEl","effect","getEffectParams","perspective","overwriteParams","slidesPerView","slidesPerGroup","watchSlidesProgress","spaceBetween","virtualTranslate","default"],"mappings":"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","sourcesContent":["import { c as createShadow } from '../shared/create-shadow.mjs';\nimport { e as effectInit } from '../shared/effect-init.mjs';\nimport { e as effectTarget } from '../shared/effect-target.mjs';\nimport { e as effectVirtualTransitionEnd } from '../shared/effect-virtual-transition-end.mjs';\nimport { l as getSlideTransformEl } from '../shared/utils.mjs';\n\nfunction EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true\n    }\n  });\n  const createSlideShadows = (slideEl, progress) => {\n    let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n    if (!shadowBefore) {\n      shadowBefore = createShadow('flip', slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n    if (!shadowAfter) {\n      shadowAfter = createShadow('flip', slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    // Set shadows\n    swiper.params.flipEffect;\n    swiper.slides.forEach(slideEl => {\n      let progress = slideEl.progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      createSlideShadows(slideEl, progress);\n    });\n  };\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      let progress = slideEl.progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      const offset = slideEl.swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n      if (swiper.browser && swiper.browser.isSafari) {\n        if (Math.abs(rotateY) / 90 % 2 === 1) {\n          rotateY += 0.001;\n        }\n        if (Math.abs(rotateX) / 90 % 2 === 1) {\n          rotateX += 0.001;\n        }\n      }\n      slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n      if (params.slideShadows) {\n        createSlideShadows(slideEl, progress);\n      }\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = transform;\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements\n    });\n  };\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\nexport { EffectFlip as default };\n"]},"metadata":{},"sourceType":"module"}