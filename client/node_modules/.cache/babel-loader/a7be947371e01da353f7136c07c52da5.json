{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { makeRequest } from \"../makeRequest\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await makeRequest.get(url);\n        setData(res.data.data);\n      } catch (err) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"bUDdnDopLs7sI4ubr9BcUYSaQYs=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/hamzag/Desktop/landPage/landingPage/client/src/hooks/useFetch.js"],"names":["useEffect","useState","makeRequest","useFetch","url","data","setData","loading","setLoading","error","setError","fetchData","res","get","err"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMI,GAAG,GAAG,MAAMV,WAAW,CAACW,GAAZ,CAAgBT,GAAhB,CAAlB;AACAE,QAAAA,OAAO,CAACM,GAAG,CAACP,IAAJ,CAASA,IAAV,CAAP;AACD,OAJD,CAIE,OAAOS,GAAP,EAAY;AACZJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATD;;AAUAG,IAAAA,SAAS;AACV,GAZQ,EAYN,CAACP,GAAD,CAZM,CAAT;AAcA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD,CApBD;;GAAMN,Q;;AAsBN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { makeRequest } from \"../makeRequest\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await makeRequest.get(url);\n        setData(res.data.data);\n      } catch (err) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}